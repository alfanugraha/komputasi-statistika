---
title: "Pengantar Pemrograman R"
subtitle: "<br/>The only way to learn a new programming language is by writing programs in it.<br/>- Dennis Ritchie<br/><br/>"
block-headings: TRUE
author: "<br/><br/><br/>Alfa Nugraha Pradana"
institute: "Statistika dan Sains Data IPB University"
footer: "[rpubs.com/alfanugraha/sta1271-p01](https://rpubs.com/alfanugraha/sta1271-p01)&nbsp;&nbsp;&nbsp;"
format: 
  revealjs:
    theme: [default, custom.scss]
    slide-number: c/t
    code-copy: true
    code-overflow: wrap
    highlight-style: zenburn
    height: 1080
    width: 1920
    logo: assets/img/LogoIPBUni.png
    preview-links: auto
editor: source
---

# Tipe dan Struktur Data pada R {background="#43464B"}

## Tipe Data

R memiliki *6 tipe data dasar*. Elemen pada tipe data tersebut dapat dikombinasikan ke dalam berbagai bentuk struktur data dalam R.

. . .

Berikut ini adalah contoh tipe data yang dapat di gunakan:

::: incremental
-   **character**. [`'a'`, `"swc"`]{.fragment}

-   **numeric**: [`2`, `15.5`]{.fragment}

-   **integer**: [`2L`, simbol `L` artinya variabel tersebut disimpen sebagai integer]{.fragment}

-   **logical**: [`TRUE`, `FALSE`]{.fragment}

-   **complex**: [`1.2e6+4i`, bilangan kompleks dengan imajiner]{.fragment}
:::


## Tipe Data

<br>

Koma pada tipe bilangan numerik menggunakan simbol titik `(.)`

```{r}
#| eval: false
#| echo: true
numerik = 1.2e-2 
is.numeric(numerik)
```

. . .

Bilangan kompleks dengan imajiner `i=sqrt(-1)`.

```{r}
#| eval: false
#| echo: true
kompleks = 1.2e6+2i
is.complex(kompleks) 
```

. . .

Karakter penulisan kutip harus konsisten tidak boleh berbeda seperti `"...'`.

```{r}
#| eval: false
#| echo: true
karakter = "IPB"
is.character(karakter)
```

. . .

Boolean dapat dituliskan seperti berikut `T`, `F`, `TRUE`, `FALSE`.

```{r}
#| eval: false
#| echo: true
logis = T
is.logical(logis)
```

## Struktur Data: Vektor {.scrollable}

Vektor merupakan objek data dengan 1 dimensi yang semua anggotanya memiliki tipe yang sama. Sebagai contoh, semua anggota vektor memiliki tipe numerik atau karakter, tidak dapat dicampur

<br>

. . .

```{r}
#| eval: true
#| echo: true
vektor = 1:10
vektor
```

## Struktur Data: Matriks {.scrollable} 

Matriks memiliki 2 dimensi yang dapat berupa kumpulan vektor yang akan membentuk persegi panjang berukuran $n \times p$. Semua elemen matriks memiliki tipe yang sama.

```{r}
#| eval: true
#| echo: true
matriks = matrix(1:20, ncol=4, byrow = T)
matriks
```

<br>

Untuk mengakses elemen matriks dapat digunakan `nama.matriks[baris, kolom]`.

```{r}
#| eval: true
#| echo: true
matriks[4,3]
```

contoh di atas untuk mengambil elemen yang berada pada baris ke-4 dan kolom ke-3.

## Struktur Data: Array {.scrollable} 

Array memiliki lebih dari 2 dimensi serta tipe yang sama

```{r}
#| eval: true
#| echo: true
array1 = Titanic
array1
```

<br>

`array1` memiliki 4 dimensi.

## Struktur Data: Faktor/Ordered {.scrollable} 

Faktor untuk data berskala nominal yang memiliki kelompok (`levels`), namun antar kelompok tidak memiliki urutan

```{r}
#| eval: true
#| echo: true
faktor = factor(c("p","l","l","p","l"))
faktor
```

<br>

Ordered untuk data berskala ordinal yang memiliki kelompok (`levels`) dan antar kelompok memiliki urutan

```{r}
#| eval: true
#| echo: true
ordered1 = ordered(c("SD","SMP","SD","SMA","SMP"), levels=c("SD","SMP","SMA"))
ordered1
```

## Struktur Data: List {.scrollable} 

List merupakan kumpulan beberapa objek yang dapat memiliki jenis yang berbeda

```{r}
#| eval: true
#| echo: true
list1 = list(ordered1,matriks,vektor)
list1
```

<br>

Untuk mengakses list dapat menggunakan `nama.list[[objek]][elemen]` sebagai berikut

```{r}
#| eval: true
#| echo: true
list1[[1]][3]
```

Contoh di atas untuk mengambil objek ke-1 dan elemen yang berada pada urutan ke-3.


## Struktur Data: Data Frame {.scrollable} 

Data frame merupakan data dalam format tabel yang semua anggota dalam 1 kolom memiliki tipe yang sama sementara antar kolom dapat diatur dengan tipe yang berbeda. Setiap kolom harus memiliki jumlah yang sama (jumlah baris sama).

```{r}
#| eval: true
#| echo: true
dataframe = data.frame(X=rep(c("A","B","C","D","E"),2),vektor)
dataframe
```

<br>

Untuk mengakses data frame dapat menggunakan nama.dataframe\$nama.kolom

```{r}
#| eval: true
#| echo: true
dataframe$X
```



# Struktur Kendali {background="#43464B"}

## Eksekusi Bersyarat {.scrollable}

### Pernyataan `if`

`if (kondisi) ekspresi (TRUE) [else ekspresi (FALSE)]`

```{r}
#| eval: true
#| echo: true
y=2
if(y>0) y=2*y
y
```

<br>

. . .

### Fungsi `ifelse`

`x <- ifelse(kondisi, nilai jika T, nilai jika F)`

```{r}
#| eval: true
#| echo: true
x = 2
nilai <- ifelse(x>0, "positif", "negatif")
nilai
```

## Fungsi `switch`

<br>

Digunakan untuk mengganti metode perhitugan sesuai dengan tipe yang dipilih.

```{r}
#| eval: true
#| echo: true
centre <- function(x, type) {
  switch(type,
         mean = mean(x),
         median = median(x),
         trimmed = mean(x, trim = .1))
}
dt <- c(1, 2, 2, 3, 4, 4, 5, 6, 8, 9)
dt_mean <- centre(dt, "mean")
dt_median <- centre(dt, "median")
dt_trimmed <- centre(dt, "trimmed")
data.frame(dt_mean,dt_median,dt_trimmed)
```


<br>

```{r}
#| eval: true
#| echo: true
centre(dt,"median")
```


## Perulangan (loop) {.scrollable}

### Pernyataan `for`

Digunakan ketika pengulangan diketahui jumlahnya dengan bentuk umum berikut: `for (objek in sekuens) ekspresi`

```{r}
#| eval: true
#| echo: true
kuadrat<-c()
for (i in 1:10){
  kuadrat[i] <- i^2
}
kuadrat
```

<br>

. . .

### Pernyataan `while`

<br>

Digunakan ketika pengulangan tidak diketahui jumlahnya dan minimal pengulangan = 0. ekspresi bisa tidak dijalankan apabila kondisi `while` tidak terpenuhi (bernilai `FALSE`). Bentuk umum: `while (condition) ekspresi`

```{r}
#| eval: true
#| echo: true
i <- length(kuadrat)
akar <- c()
while (i>0){
  akar[i] <- sqrt(kuadrat[i])
  i <- i-1
}
akar
```


## Pernyataan `repeat`

<br>

Digunakan ketika pengulangan tidak diketahui jumlahnya dan minimal pengulangan = 1. Bentuk umum repeat: repeat ekspresi (untuk menghentikan gunakan perintah break)

```{r}
#| eval: true
#| echo: true
repeat{
  i<-i+1
  print(kuadrat[i])
  if (i==8) {break()}
}
```


# Fungsi pada R {background="#43464B"}

## Manajemen data dan utilitas

<br>

```{r}
#| eval: true
#| echo: true
x = c(1,3,2,4,8,5,6,9,7)
sort(x,decreasing = F)
rev(x)
```

<br>

`sort` untuk mengurutkan data. `rev` untuk membalik urutan data (data terakhir menjadi data pertama, data kedua terakhir menjadi data kedua, dst).

## Aritmetika

<br>

```{r}
#| eval: true
#| echo: true
log(x)
sqrt(x)
```

<br>

`log` untuk menghitung nilai logaritma dari data. `sqrt` untuk menghitung nilai akar kuadrat dari data.

## Statistik

<br>

```{r}
#| eval: true
#| echo: true
sum(x)
mean(x)
var(x)
sd(x)
```

<br>

`sum` untuk menghitung jumlah data. `mean` untuk menghitung rata-rata data. `var` untuk menghitung ragam data. `sd` untuk menghitung standar deviasi data.


## Grafik {.scrollable}

<br>

Beberapa fungsi untuk membuat grafik

### histogram

```{r}
#| eval: true
#| echo: true
hist(x)
```

<br>

. . .

### Boxplot

```{r}
#| eval: true
#| echo: true
boxplot(x)
```


## Membangun Fungsi

<br>

R memberikan mekanisme dalam membuat fungsi sesuai dengan kebutuhan analisis dengan bentuk umum: `namafungsi <- function (argumen) isifungsi`

```{r}
#| eval: true
#| echo: true
#Membuat fungsi simpangan baku 
simpangan.baku <- function(x) sqrt(var(x))
simpangan.baku(x)
```

<br>

. . .

Contoh tersebut merupakan fungsi untuk menghitung simpangan baku yang memiliki nilai akar dari ragam. Penggunaan fungsi dengan memanggil nama fungsi beserta argumennya dengan bentuk umum: `namafungsi(arg1, arg2, ...)`

## Argumen Fungsi

<br>

Pada contoh sebelumnya fungsi memiliki 1 nilai argumen yaitu `x` dan tidak diatur nilai defaultnya. Berikut adalah contoh fungsi yang didefinisikan nilai defaultnya, yaitu `x=2`.

<br>

```{r}
#| eval: true
#| echo: true
fgs_3 <- function(x=2,y){x*y}
fgs_3(3,3) #argumen lengkap
fgs_3(,3) #argumen tidak lengkap
fgs_3(y=3) #penulisan argumen tidak lengkap yang lebih tepat
```

## Output/Luaran Fungsi

<br>

Output dari fungsi adalah objek

```{r}
#| eval: true
#| echo: true
fungsi1 <- function(x) {
  y = x^2
  z = sum(y)
  list(y,z) #dapat ditulis: return(list(y,z))
}
fungsi1(x)
```

<br>

`y` merupakan nilai kuadrat dari setiap unsur `x` dan `z` merupakan jumlah kuadrat dari `x`.

# Penanganan Kesalahan  {background="#43464B"}

## `try`

<br>

`try`: pembungkus untuk menjalankan ekspresi yang mungkin gagal dan memungkinkan kode pengguna untuk menangani pemulihan kesalahan

```{r}
#| eval: true
#| echo: true
try(log("not a number"), silent = T)
print("errors can't stop me")
```

Peringatan error dapat tidak ditampilkan dan langsung menjalankan perintah pada baris berikutnya.

## `tryCatch`

<br>

`tryCatch`: menyediakan mekanisme untuk menangani kondisi yang tidak biasa, termasuk kesalahan dan peringatan

```{r}
#| eval: true
#| echo: true
tryCatch(log(10), finally = print("Hello"))
```

## `warning`

<br>

`warning`: menghasilkan pesan peringatan yang sesuai dengan argumennya

```{r}
#| eval: true
#| echo: true
warning("bad weather today, don't forget your umbrella")
```

## `stop`

<br>

`stop`: menghentikan eksekusi ekspresi saat ini

```{r}
#| eval: false
#| echo: true
if (1 != 2)
  stop("something is wrong")
```


## Teladan membangun Fungsi

Membangun fungsi untuk Melakukan Pengujian Hipotesis Nilai Tengah untuk Dua Populasi dengan ragam sama. Algoritma : 1 hitung masing-masing n 2 hitung galat baku 3 hitung statistik uji 4 hitung nilai-p 5 tetapkan keputusan penerimaan atau penolakan H0

```{r}
#| eval: false
#| echo: true
ttest <- function(y1,y2,test="dua-arah",alpha=0.05) {
  
  n1 <- length(y1); n2 <- length(y2)
  ndf <- n1+n2-2
  s2 <- ((n1-1)*var(y1) + (n2-1)*var(y2))/ndf
  tstat <- (mean(y1)-mean(y2))/sqrt(s2*(1/n1+1/n2))
  
  tail.area <- switch(
    test,
    "dua-arah" = 2*(1-pt(abs(tstat),ndf)),
    kecil = pt(tstat,ndf),
    besar = 1-pt(tstat,ndf),
    {
      warning("uji harus 'dua-arah', 'kecil' atau 'besar'")
      NULL
    }
  )
  
  list(
    tstat=tstat,
    df=ndf,
    reject=if(!is.null(tail.area))
    tail.area < alpha,
    tail.area=tail.area
  )
}
x <- c(5,6,4,5,3,6,7)
y <- c(6,7,4,6,3,5,4)
ttest(x,y)
```

Output fungsi di atas terdiri dari tstat (tvalue), df (derajat bebas), reject (keputusan untuk tolak H0 atau tak tolak H0), dan tail.area (pvalue).

# Package R

## Instalasi Package R

<br>

Sebuah ekstensi dari sistem dasar R dengan kode, data dan dokumentasi dalam format standar. Paket-paket R merupakan cara untuk memelihara koleksi fungsi dan data set R yang dapat disebarluaskan.

<br>

Berikut adalah cara menginstal paket R

```{r}
#| eval: false
#| echo: true
install.packages("MASS")
```

## Menggunakan paket R


Berikut adalah cara menggunakan atau menjalankan paket R

```{r}
#| eval: true
#| echo: true
library(MASS)
data(npk)
npk
```

Beberapa package memiliki dataset yang dapat diakses dengan memanggil nama objek dataset tersebut. Berikut adalah cara untuk melepas (`unload`) paket R

```{r}
#| eval: false
#| echo: true
detach("package:MASS")
```

# Question? {background="#43464B"}