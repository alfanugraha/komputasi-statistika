---
title: "Fungsi Matematik dan Statistik"
subtitle: "<br/>Functions should do one thing. They should do it well. They should do only.<br/>- anonymous<br/><br/>"
block-headings: TRUE
author: "<br/><br/><br/>Alfa Nugraha Pradana"
institute: "Statistika dan Sains Data IPB University"
footer: "[rpubs.com/alfanugraha/sta1271-p02](https://rpubs.com/alfanugraha/sta1271-p02)&nbsp;&nbsp;&nbsp;"
format: 
  revealjs:
    theme: [default, custom.scss]
    slide-number: c/t
    code-copy: true
    code-overflow: wrap
    highlight-style: zenburn
    height: 1080
    width: 1920
    logo: assets/img/LogoIPBUni.png
    preview-links: auto
editor: source
---

## Himpunan: union, intersect, setdiff

R memiliki fungsi-fungsi himpunan yang diterapkan pada vektor. Misalkan pada vektor x dan y berikut.

```{r}
#| eval: true
#| echo: true
x <- c(1,6,3,6,5)
y <- c(8,9,5,1,4)
```

. . .

`union(x,y)` digunakan untuk mendapatkan nilai unik dari anggota x dan y

```{r}
#| eval: true
#| echo: true
union(x,y)
```

<br>

. . .

`intersect(x,y)` digunakan untuk mendapatkan anggota x yang juga anggota y

```{r}
#| eval: true
#| echo: true
intersect(x,y)
```

<br>

. . .

`setdiff(x,y)` digunakan untuk mendapatkan anggota x yang bukan anggota y

```{r}
#| eval: true
#| echo: true
setdiff(x,y)
setdiff(y,x)
```

## Himpunan: setequal

`setequal(x,y)` digunakan untuk mengetahui apakah semua anggota x dan y sama

```{r}
#| eval: true
#| echo: true
setequal(x,y)
```

<br>

```{r}
#| eval: true
#| echo: true
# contoh ketika x dan y memiliki anggota yang sama
x1 <- c(1,2,3,4,5,3,2,1)
y1 <- c(5,4,3,2,1)
setequal(x1,y1)
```

jumlah elemen dan urutan tidak berpengaruh, yang dicek ialah nilai unik dari setiap elemen pada kedua vektor.

## Himpunan: choose, combn


`choose(n,k)` digunakan untuk mengetahui banyaknya kombinasi `k` dari `n`

```{r}
#| eval: true
#| echo: true
choose(5,3)
```

<br>

. . .

`combn(n,k)` digunakan untuk mendapatkan matriks semua kemungkinan kombinasi `k` dari `n`
`
```{r}
#| eval: true
#| echo: true
combn(5,3)
```

## Himpunan: operator IN

digunakan untuk mengetahui apakah anggota vektor c ada di y

```{r}
#| eval: true
#| echo: true
x; y
```

<br>

```{r}
#| eval: true
#| echo: true
c(1,2,3) %in% x
```

<br>

```{r}
#| eval: true
#| echo: true
7 %in% y
```

<br>

```{r}
#| eval: true
#| echo: true
x %in% y
```



# Fungsi Matematik {background="#43464B"}

## Fungsi Matematik Umum {.scrollable}

::: columns
::: {.column width="50%"}
`exp()` fungsi eksponensial dengan basis natural ($e$)

```{r}
#| eval: true
#| echo: true
exp(8)
exp(1)
exp(1)^8
```

<br>

`log()` digunakan untuk mendapatkan nilai logaritma dengan basis natural ($ln$)

```{r}
#| eval: true
#| echo: true
log(100)
```

<br>

`log10()` digunakan untuk mendapatkan nilai logaritma dengan basis 10

```{r}
#| eval: true
#| echo: true
log10(100)
```
:::
::: {.column width="50%"}
`sqrt()` digunakan untuk mendapatkan nilai akar kuadrat

```{r}
#| eval: true
#| echo: true
sqrt(x)
sqrt(100)
```

<br>

`abs()` digunakan untuk mendapatkan nilai nilai absolut / nilai mutlaknya

```{r}
#| eval: true
#| echo: true
x2 <- c(-1,2,-3,4,-5)
abs(x2)
```
:::
:::



## Fungsi Trigonometri

Berikut adalah beberapa fungsi trigonometri

```{r}
#| eval: true
#| echo: true
sin(pi)
```
<br>

```{r}
#| eval: true
#| echo: true
cos(pi)
```

<br>

```{r}
#| eval: true
#| echo: true
tan(pi)
```

fungsi di atas digunakan untuk mendapatkan nilai sinus, cosinus, dan tangen.

## Fungsi Bilangan Integer

Berikut adalah beberapa fungsi pembulatan bilangan agar menjadi bilangan integer.

```{r}
#| eval: true
#| echo: true
y2 <- c(2.4, 3.6, 4.5, 5.5)
round(y2)
floor(y2) 
ceiling(y2) 
```

Perbedaan pada penggunaan fungsi-fungsi di atas yaitu:

-   `round()` memiliki hasil yang sama seperti pembulatan biasa dimana:
-   bila nilai koma \> 0.5 maka bilangan akan dibulatkan ke atas.
-   bila nilai koma \< 0.5 maka bilangan akan dibulatkan ke bawah.
-   bila nilai koma = 0.5 dan bilangan integernya bernilai genap maka bilangan akan dibulatkan ke bawah.
-   bila nilai koma = 0.5 dan bilangan integernya bernilai ganjil maka bilangan akan dibulatkan ke atas.
-   `floor()`: pembulatan ke bawah (hanya mengambil nilai integernya saja).
-   `ceiling()`: pembulatan ke atas

## Fungsi Faktorial

`n!=nx(n-1)x(n-2)x…x1`

```{r}
#| eval: true
#| echo: true
factorial(5)
```

<br>

```{r}
#| eval: true
#| echo: true
5*4*3*2*1
```

## Fungsi-fungsi Lain

Terdapat pula beberapa fungsi umum yang sering digunakan, berikut adalah contoh penggunaan fungsi umum pada suatu vektor $a$.

```{r}
#| eval: true
#| echo: true
a <- c(4,5,6,2,1,3,5,4,8,3)
```

<br>

`min()` and `max()` digunakan untuk mendapatkan nilai minimum dan maksimum dari suatu vektor

```{r}
#| eval: true
#| echo: true
min(a)
max(a)
```

<br>

`which()` mendapatkan indeks vektor yang memenuhi kriteria tertentu

```{r}
#| eval: true
#| echo: true
which(a>4)
```

## Fungsi-fungsi Lain {.scrollable}

`which.min()` : mendapatkan indeks vektor untuk nilai minimum

```{r}
#| eval: true
#| echo: true
which.min(a)
```


`which.max()`: mendapatkan indeks vektor untuk nilai maksimum

```{r}
#| eval: true
#| echo: true
which.max(a)
```


`pmin()` and `pmax()` *element-wise* minimum dan maksimum dari suatu vektor

```{r}
#| eval: true
#| echo: true
b <- c(2,1,8,7,8,2,8,6,3,2)
a
b
pmin(a,b)
```


```{r}
#| eval: true
#| echo: true
pmax(a,b)
```


Contoh lain

```{r}
#| eval: true
#| echo: true
nilai1 <- round(rnorm(10,70,5),2)
nilai2 <- round(rnorm(10,80,7),2)
data.nilai <- data.frame(nilai1,nilai2,nilai.maksimum=pmax(nilai1,nilai2))
data.nilai
```


<br>

## Fungsi-fungsi Lain

`sum()` and `prod()` jumlah dan perkalian elemen suatu vektor

```{r}
#| eval: true
#| echo: true
a
sum(a)
prod(a)
```

`cumsum()` and `cumprod()` jumlah dan perkalian kumulatif dari elemen suatu vektor

```{r}
#| eval: true
#| echo: true
cumsum(a)
cumprod(a)
```

## Fungsi Kalkulus: Diferensial

R memiliki fungsi-fungsi untuk mendapatkan turunan dari suatu fungsi.
Fungsi yang digunakan merupakan fungsi dengan satu peubah.

`D(expr,simbol)` digunakan jika hasil turunan merupakan suatu fungsi.
Sebagai contoh akan dicari turunan dari fungsi $f(x) = e^{(x^2)}$

```{r}
#| eval: true
#| echo: true
xfs <- expression(exp(x^2))
D(xfs,"x")
```

`deriv(∼fungsi,simbol)` digunakan jika akan memasukkan nilai dari hasil turunan pada suatu fungsi.
Sebagai contoh akan dicari turunan dari fungsi berikut $f(x) = x^2$ untuk nilai $x=3$

```{r}
#| eval: true
#| echo: true
xturunan <- deriv(~x^2, "x")
x<-3
eval(xturunan)
```

```{r}
#| eval: true
#| echo: true
xturunan
```

## Fungsi Kalkulus: Integral

Selain turunan pada fungsi sederhana, R juga memiliki fungsi untuk mendapatkan luas wilayah suatu fungsi dengan integral `integrate(fungsi, lower, upper)`

```{r}
#| eval: true
#| echo: true
fs <- function(x) x^2
integrate(fs,0,1)
fsi <- function(x) 1/3*x^3
fsi(1) - fsi(0)
```

Selain itu, terdapat fungsi `yac_str()` pada package `Ryacas` untuk mencari integral tak tentu.

```{r}
#| eval: true
#| echo: true
library(Ryacas)
```

$\begin{aligned} \int x^2 + 4x dx \end{aligned}$

```{r}
#| eval: true
#| echo: true
yac_str("Integrate(x) x^2 + 4*x")
```

# Fungsi Statistik {background="#43464B"}

## Sebaran

Fungsi sebaran statistik secara konvensi:

-   `dnamasebaran`: density or probability mass function (pmf)
-   `pnamasebaran`: cumulative distribution function (cdf)
-   `qnamasebaran`: quantiles
-   `rnamasebaran`: random number generation

berikut adalah contoh penggunaan fungsi sebaran pada sebaran normal baku.

```{r}
#| eval: true
#| echo: true
dnorm(0,mean=0,sd=1)
pnorm(0,mean=0,sd=1)
qnorm(0.5,mean=0,sd=1)
x <- rnorm(10,mean=0,sd=1)
cbind(mean(x),sd(x))
```

## Tabel Sebaran {.scrollable}

Nama sebaran berikut parameternya dapat dilihat pada tabel di bawah

| Distribution   | Name      | Parameters          |
|----------------|-----------|---------------------|
| beta           | `beta`    | shape1, shape2, ncp |
| binomial       | `binom`   | size, prob          |
| Chauchy        | `cauchy`  | location, scale     |
| chi-squared    | `chisq`   | df, ncp             |
| exponential    | `exp`     | rate                |
| F              | `f`       | df1, df2, ncp       |
| gamma          | `gamma`   | shape, scale        |
| geometric      | `geom`    | prob                |
| hypergeometric | `hyper`   | m, n, k             |
| log-normal     | `lnorm`   | meanlog, sdlog      |
| logistic       | `logis`   | location, scale     |
| uniform        | `unif`    | min, max            |
| neg binomial   | `nbinom`  | size, prob          |
| normal         | `norm`    | mean, sd            |
| Poisson        | `pois`    | lambda              |
| Student's t    | `t`       | df, ncp             |
| Weibull        | `weibull` | shape               |
| Empirical cdf  | `ecdf`    | \-                  |
| Box-percentile | `bpplot`  | list of vector      |

<br>

# Optimasi Numerik {background="#43464B"}

## Optimasi Numerik

Beberapa metode statistik menggunakan metode pendugaan nilai optimum dari suatu fungsi tujuan seperti dengan metode kemungkinan maksimum (memaksimumkan likelihood) dan metode kuadrat terkecil (meminimumkan JKG).

Mendapatkan nilai optimum dari suatu fungsi merupakan suatu teknik optimasi numerik.

Beberapa metode yang sudah dikembangkan diantaranya:

- Golder Section Search
- Newton Raphson
- Fungsi Optimasi built-in

## Golden Section Search {.scrollable}

Metode Golden Section Search digunakan untuk mencari nilai minimum suatu fungsi yang dibatasi dari dua buah nilai, yaitu sebuah selang $a$ dan $b$.
Algoritma untuk teknik ini adalah sebagai berikut:

-   Mulai dengan selang $[a,b]$ yang memuat minimum
-   Perkecil selang $[a’, b’]$ yang memuat minimum
-   Berhenti sampai $|b’ - a’|$ lebih kecil dari nilai toleransi

Pemilihan nilai $a'$ dan $b'$, adalah sebagai berikut

-   Nilai antara $[a,b]$ memiliki sifat golden ratio

-   Tentukan $x_1$ dan $x_2$

    $x_1 = b-(b-a)/\mathrm{goldenratio}$

    $x_2 = a+(b-a)/\mathrm{goldenratio}$

-   Hitung $f(x_1)$ dan $f(x_2)$

-   Jika $f(x_1) > f(x_2)$ maka $[a’, b’] = [x_1, b]$

-   Jika $f(x_1) < f(x_2)$ maka $[a’, b’] = [a, x_2]$

## Fungsi `golden` 

::: columns
::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
golden <- function (f, a, b, tol=0.0000001) {
  ratio <- 2 / ( sqrt (5)+1)
  x1 <- b-ratio * (b-a)
  x2 <- a+ratio * (b-a)
  f1 <- f(x1)
  f2 <- f(x2)
  
  while ( abs (b-a)>tol){
    if (f2>f1){
      b <- x2
      x2 <- x1
      f2 <- f1
      x1 <- b-ratio * (b-a)
      
      f1 <- f(x1)
    } else {
        a <- x1
        x1 <- x2
        f1 <- f2
        x2 <- a+ratio * (b-a)
        f2 <- f(x2)
    }
  }
  return ((a+b) / 2)
}
```


Contoh: $f(x) = |x -3.5| +(x-2)^2$

```{r}
#| eval: true
#| echo: true
# (1) Membuat fungsi f(x)
f <- function(x) {abs(x-3.5)+(x-2)^2}
```
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
# (2) Membuat plot
curve(f, 1,5)
```

```{r}
#| eval: true
#| echo: true
# (3) Menghitung nilai optimum
golden(f,1,2)
golden(f,1,5)
golden(f,3,5)
golden(f,2,3)
```
:::
:::

## Newton Raphson

Jika suatu fungsi memiliki turunan pertama dan kedua, maka nilai minimum dapat menggunakan metode Newton Raphson.

**Kelebihan** metode ini adalah hanya memerlukan satu nilai untuk inisial.

**Kelemahan**nya adalah kita harus yakin f(x) memiliki turunan pertama dan turunan kedua.

Jika di golden section tidak perlu ada turunan pertama dan turunan kedua.

## Fungsi `newtonr`

::: columns
::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
newtonr <- function (fx , x0 =1){
  fx1 <- deriv (fx ,"x") # turunan pertama
  fx2 <- deriv (D(fx ,"x"),"x") # turunan kedua
  er <- 1000
  
  while(er > 1e-6){
    x <- x0
    f1 <- attr ( eval (fx1),"gradient")[1]
    f2 <- attr ( eval (fx2),"gradient")[1]
    er <- abs(f1) # bisa juga e <- abs (x1 -x0)
    x1 <- x0 - f1/f2
    x0 <- x1
  }
  return (x1)
}
```
:::

::: {.column width="50%"}
Hitung nilai minimum untuk fungsi- fungsi berikut.

* $\begin{aligned} f(x) = 4x^2 - 3x - 7 \end{aligned}$

```{r}
#| eval: true
#| echo: true
fx <- expression(4*x^2-3*x-7)
newtonr(fx,3)
```

* $\begin{aligned} f(x) = e^{-x}+x^4 \end{aligned}$

```{r}
#| eval: true
#| echo: true
fx <- expression(exp(-x)+x^4)
newtonr(fx)
newtonr(fx,1)
```

* $\begin{aligned} f(x) = x^2 - x \end{aligned}$

```{r}
#| eval: true
#| echo: true
fx <- expression(x^2-x)
newtonr(fx)
```
:::
:::

## Fungsi Optimasi Built-in

Algoritma *Nelder Mead* adalah salah satu metode optimasi untuk fungsi yang memiliki lebih dari satu variabel.

R telah menyiapkan fungsi optimasi dengan salah satu algoritmanya adalah Nelder-Mead:

-   `optimize` atau `optimise` untuk menduga parameter/ mencari nilai minimum dari satu peubah
-   `optim` untuk lebih dari satu peubah

## Fungsi `optimize`/`optimise`

::: columns
::: {.column width="50%"}
$\begin{aligned} f(x) = \left( x - \frac{1}{3} \right)^2 \end{aligned}$

```{r}
#| eval: true
#| echo: true
f <- function(x) ((x-(1/3))^2) # membuat fungsi tujuan
curve(f)
```
:::

::: {.column width="50%"}

<br>
<br>


```{r}
#| eval: true
#| echo: true
xmin <- optimize(f, c(0,1), tol = 0.0001) # tolerance optional
xmin
```

:::
:::

## Fungsi `optim`

Digunakan untuk mencari nilai minimum dari fungsi yang lebih dari satu peubah.
Contoh mencari nilai $x_1$ dan $x_2$, yang mebuat $f(x_1,x_2) = 100(x_2 - x_1^2)^2 + (1-x_1)^2$ minimum

Program yang digunakan:

```{r}
#| eval: true
#| echo: true
fr <- function (x){ # tetap dituliskan dalam sebuah vektor, akan diduga x
  x1<- x[1]
  x2 <- x[2]
  100 * (x2-x1^2)^2 + (1-x1)^2 # ini adalah nilai fungsi objetivenya
} 

# argumen pertama adalah nilai inisial, karena menduga x vektor berukuran 2 maka dimasukkan nilai inisialnya
optim (c(-1.2,1),fr) 
```


# Question? {background="#43464B"}